using Grpc.Core;
using GrpcService1;
using System.Xml;

namespace Classroom.Services
{
    /// <summary>
    /// Implementation of the Classroom gRPC service methods.
    /// </summary>
    public class ClassroomServiceImpl : GrpcService1.Classroom.ClassroomBase
    {
        // Instance of ClassroomLogic to handle business logic
        private readonly ClassroomLogic classlogic = new ClassroomLogic();

        /// <summary>
        /// Generates a unique ID for the requesting client.
        /// </summary>
        public override Task<UniqueIdResponse> GetUniqueId(Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
        {
            int uniqueId = classlogic.GetUniqueId();  // Retrieve unique ID from ClassroomLogic
            var response = new UniqueIdResponse { UniqueId = uniqueId };
            return Task.FromResult(response);
        }

        /// <summary>
        /// Handles the generation of students by a door.
        /// </summary>
        public override Task<Google.Protobuf.WellKnownTypes.Empty> GeneratedNumberOfStudents(StudentGenerationRequest request, ServerCallContext context)
        {
            // Update the student count in ClassroomLogic
            classlogic.UpdateStudentCount(request.Door.AmountOfStudents);

            // Log the number of students generated by the specific door
            Console.WriteLine($"Door {request.Door.DoorId} generated {request.Door.AmountOfStudents} students.");
            return Task.FromResult(new Google.Protobuf.WellKnownTypes.Empty());
        }

        /// <summary>
        /// Checks if there are enough students present to start the class.
        /// </summary>
        public override Task<StudentCheckResponse> EnoughStudents(Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
        {
            bool enoughStudents = classlogic.CanVotingStart();
            var response = new StudentCheckResponse { EnoughStudents = enoughStudents };
            return Task.FromResult(response);
        }

        /// <summary>
        /// Checks if the class is currently in session.
        /// </summary>
        public override Task<ClassSessionStateResponse> IsClassInSession(Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
        {
            bool isInSession = classlogic.IsClassInSession();
            var response = new ClassSessionStateResponse { IsInSession = isInSession };
            return Task.FromResult(response);
        }

        /// <summary>
        /// Records a teacher's vote to start the class session.
        /// </summary>
        public override Task<VoteResponse> VoteStartClass(GrpcService1.Teacher input, ServerCallContext context)
        {
            var teacher = new Teacher
            {
                TeacherId = input.TeacherId,
                Name = input.Name,
                HasVotedToStart = input.HasVotedToStart,
                HasVotedToEnd = input.HasVotedToEnd
            };

            bool isSuccess = classlogic.VoteToStartClass(teacher);
            return Task.FromResult(new VoteResponse { IsSuccess = isSuccess });
        }

        /// <summary>
        /// Records a teacher's vote to end the class session.
        /// </summary>
        public override Task<VoteResponse> VoteEndClass(GrpcService1.Teacher input, ServerCallContext context)
        {
            var teacher = new Teacher
            {
                TeacherId = input.TeacherId,
                Name = input.Name,
                HasVotedToStart = input.HasVotedToStart,
                HasVotedToEnd = input.HasVotedToEnd
            };

            bool isSuccess = classlogic.VoteToEndClass(teacher);
            return Task.FromResult(new VoteResponse { IsSuccess = isSuccess });
        }
    }
}
